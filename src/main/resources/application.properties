spring.application.name=simpleapi
# PostgreSQL Connection Properties
spring.datasource.url=jdbc:postgresql://localhost:5432/simpleapi
spring.datasource.username=postgres
spring.datasource.password=postgres
spring.datasource.driver-class-name=org.postgresql.Driver
# JPA/Hibernate Properties
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
# /api-docs endpoint custom path
springdoc.api-docs.path=/api-docs
springdoc.api-docs.enabled=true
# IBM MQ Connection Properties
# JMS configuration
spring.jms.listener.auto-startup=true
# IBM MQ configuration
ibm.mq.queueManager=QM1
ibm.mq.channel=DEV.APP.SVRCONN
ibm.mq.connName=localhost(1414)
ibm.mq.user=admin
ibm.mq.password=admin123
ibm.mq.queue.name.request=REQUEST
ibm.mq.queue.name.response=RESPONSE
ibm.mq.useIBMCipherMappings=false
ibm.mq.transportType=CLIENT
# Connection pool settings
ibm.mq.pool.enabled=true
ibm.mq.pool.maxConnections=10
# Debugging
ibm.mq.clientDebug=true
logging.level.com.ibm.mq=DEBUG
server.max-http-request-header-size=10MB
###############################################
# =============================================================================
# RESILIENCE4J CONFIGURATION
# =============================================================================
# ==== CIRCUIT BREAKER CONFIGURATION ====
# Circuit Breaker for Auth Service
# slidingWindowSize: Tracks the last 10 requests to determine service health
# - Small enough to respond quickly to failures
# - Large enough to avoid false positives from transient issues
# - Appropriate for APIs with moderate traffic volume
resilience4j.circuitbreaker.instances.authService.slidingWindowSize=10
# failureRateThreshold: Circuit opens when 50% of requests fail
# - Balanced threshold preventing premature opening while protecting against cascading failures
# - For more critical services, consider lowering this threshold to 20-30%
resilience4j.circuitbreaker.instances.authService.failureRateThreshold=50
# waitDurationInOpenState: Circuit remains open for 10 seconds before attempting recovery
# - Allows sufficient time for the external service to recover
# - Short enough to restore service quickly if the issue is transient
# - Can be increased for services with longer recovery times
resilience4j.circuitbreaker.instances.authService.waitDurationInOpenState=10000
# permittedNumberOfCallsInHalfOpenState: Allows 3 test requests when transitioning to half-open
# - Provides a reasonable sample size to determine if service has recovered
# - Small enough to minimize impact if service is still down
# - Balance between quick recovery and protection
resilience4j.circuitbreaker.instances.authService.permittedNumberOfCallsInHalfOpenState=3
# Circuit Breaker for Product Service
# - Same configuration as auth service for consistency
# - In production, these values should be tuned based on each service's characteristics
# - Different services may require different thresholds based on their SLAs
resilience4j.circuitbreaker.instances.productService.slidingWindowSize=10
resilience4j.circuitbreaker.instances.productService.failureRateThreshold=50
resilience4j.circuitbreaker.instances.productService.waitDurationInOpenState=10000
resilience4j.circuitbreaker.instances.productService.permittedNumberOfCallsInHalfOpenState=3
# ==== RETRY CONFIGURATION ====
# Retry for Auth Service
# maxAttempts: Retries failed requests up to 3 times (1 initial + 2 retries)
# - Balances resilience against potential load amplification
# - Suitable for transient network issues or minor service disruptions
# - For critical operations, can be increased with caution
resilience4j.retry.instances.authService.maxAttempts=3
# waitDuration: Initial delay of 1 second between retries
# - Short enough to maintain responsiveness
# - Long enough to allow minor issues to resolve
# - Should be tuned based on observed failure recovery patterns
resilience4j.retry.instances.authService.waitDuration=1000
# enableExponentialBackoff: Implements exponential backoff to prevent overwhelming the service
# - Prevents the "retry storm" anti-pattern during partial outages
# - Essential for distributed systems to implement self-healing behaviors
# - Helps service recovery by gradually spacing out retry attempts
resilience4j.retry.instances.authService.enableExponentialBackoff=true
# exponentialBackoffMultiplier: Each retry waits twice as long as the previous one (1s, 2s, 4s)
# - Standard multiplier that provides reasonable spacing between attempts
# - Helps prevent synchronized retry attempts from multiple instances
# - Higher values provide more aggressive backoff but slower recovery
resilience4j.retry.instances.authService.exponentialBackoffMultiplier=2
# Retry for Product Service
# - Similar configuration to auth service for consistency
# - Services with different characteristics may need different retry policies
# - Write operations (like product creation) might need different retry strategies than read operations
resilience4j.retry.instances.productService.maxAttempts=3
resilience4j.retry.instances.productService.waitDuration=1000
resilience4j.retry.instances.productService.enableExponentialBackoff=true
resilience4j.retry.instances.productService.exponentialBackoffMultiplier=2
# ==== RESILIENCE PATTERN INTEGRATION NOTES ====
# In our implementation, we combine patterns in the following order:
# Circuit Breaker (outer) ? Retry (inner) ? API Call
# This ordering ensures:
# 1. Circuit breaker prevents retries when circuit is open, avoiding unnecessary load
# 2. Retry attempts are made only when circuit is closed or half-open
# 3. Failure statistics are properly collected for circuit decision making
# ==== ADDITIONAL RECOMMENDATIONS ====
# Consider adding these patterns for enhanced resilience:
# 1. Timeouts: Prevent thread blocking with configurations like:
#    resilience4j.timelimiter.instances.authService.timeoutDuration=5s
#
# 2. Bulkhead: Implement thread isolation with configurations like:
#    resilience4j.bulkhead.instances.authService.maxConcurrentCalls=20
#
# 3. Rate Limiter: Prevent service abuse with configurations like:
#    resilience4j.ratelimiter.instances.authService.limitForPeriod=50
#    resilience4j.ratelimiter.instances.authService.limitRefreshPeriod=1s
# =============================================================================
# EXTERNAL SERVICE CONFIGURATION
# =============================================================================
##################################
# Configure the base URL for the external service
########################################################################################################################
#https://xmlserver-production.up.railway.app
#
app.server.external.resource.base-url=https://xmlserver-production.up.railway.app
#app.server.external.resource.base-url=http://localhost:443

app.server.external.resource.message-id-path=/api/messages/ids
app.server.external.resource.document-path=/api/documents

##############################Authentication##############################
app.server.external.oauth.base-url=${app.server.external.resource.base-url}
app.server.external.oauth.token-path=/oauth2/token
app.server.external.oauth.grant-type=client_credentials
# SpEL expression that creates a map
app.server.external.oauth.headers={'Authorization':'Basic Y3VzdG9tZXIxOmN1c3RvbWVyMQ==','Content-Type':'application/x-www-form-urlencoded','Accept':'application/json'}
##############################Authentication##############################
########################################################################################################################
# Base URLs for external services
api.auth.username=emilys
api.auth.password=emilyspass
api.auth.expiresInMins=30
api.auth.url=https://dummyjson.com/auth/login
api.product.url=https://dummyjson.com/products/add
# Configure the log pattern to include correlation ID
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] [${spring.application.name:}] [%X{correlationId:-}] %-5level %logger{36} - %msg%n
logging.pattern.file=%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] [${spring.application.name:}] [%X{correlationId:-}] %-5level %logger{36} - %msg%n
